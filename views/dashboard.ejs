<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TikTok Show Control Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=MV+Waheed&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
    <style>
        #question-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 350px);
            overflow-y: auto;
        }

        #question-list {
            flex: 1;
            overflow-y: auto;
        }

        #actions {
            margin-top: 1rem;
            display: flex;
            justify-content: space-between;
        }

        /* Sponsor Panel */
        #sponsor-panel {
            position: fixed;
            top: 0;
            right: -400px;
            /* Hidden by default */
            width: 400px;
            height: 100%;
            background: #1a202c;
            box-shadow: -4px 0 10px rgba(0, 0, 0, 0.3);
            z-index: 1000;
            transition: right 0.3s ease;
            overflow-y: auto;
        }

        #sponsor-panel.open {
            right: 0;
        }

        .sponsor-header {
            background: #2d3748;
            padding: 1rem;
            text-align: center;
            font-size: 1.5rem;
            font-weight: bold;
            color: white;
        }
    </style>
</head>

<body class="bg-gray-900 text-white font-sans">
    <div class="container mx-auto p-4">
        <h1 class="text-4xl font-bold mb-6 text-center">TikTok Show Control Dashboard</h1>
        <div class="text-center mb-4">
            <button id="toggle-sponsor-panel" class="p-2 bg-blue-500 hover:bg-blue-700 text-white rounded">
                Sponsor Display
            </button>
        </div>
        <!-- Add Q&A Form -->
        <form action="/questions/add" method="POST" class="mb-6">
            <div class="flex gap-4 items-center">
                <textarea name="content"
                    placeholder="Enter the question (text or emojis {Enter emojis separated by space (e.g., 💰 ⭐ 💰 🔥)})"
                    class="w-full p-2 rounded bg-gray-800 text-white" required></textarea>
                <input type="text" name="answer" placeholder="Enter the answer"
                    class="w-full p-2 rounded bg-gray-800 text-white" required>
                <select name="type" class="w-full p-2 rounded bg-gray-800 text-white" required>
                    <option value="text">Text</option>
                    <option value="emoji">Emoji</option>
                </select>
            </div>
            <button type="submit" class="mt-4 p-2 bg-blue-500 hover:bg-blue-700 text-white rounded">
                Add Question
            </button>
        </form>

        <div class="bg-gray-700 p-4 rounded shadow text-white mb-8">
            <h2 class="text-4xl text-red-600 font-bold mb-2">Currently On-Air</h2>
            <p id="current-question" class="text-2xl">Question: <span class="font-semibold">Waiting...</span></p>
            <p id="current-answer" class="text-2xl">Answer: <span class="font-semibold">Waiting...</span></p>
        </div>

        <h2 class="text-2xl font-semibold mb-4">Available Questions</h2>
        <div id="question-container" class="bg-gray-800 rounded p-4">
            <ul id="question-list"></ul>
        </div>
        <div id="actions">
            <button id="send-question" disabled
                class="p-2 bg-green-500 hover:bg-green-700 text-white rounded disabled:opacity-50">
                Send Question On-Air
            </button>
            <button id="send-answer" disabled
                class="p-2 bg-blue-500 hover:bg-blue-700 text-white rounded disabled:opacity-50">
                Display Answer
            </button>
            <button id="clear-output" class="p-2 bg-red-500 hover:bg-red-700 text-white rounded">
                CLEAR Output
            </button>
        </div>
    </div>

    <!-- Sponsor Panel -->
    <div id="sponsor-panel">
        <div class="sponsor-header">Sponsor Display</div>
        <form id="sponsor-upload-form" class="p-4" enctype="multipart/form-data">
            <input type="file" id="sponsor-image-input" name="image" accept="image/png, image/gif"
                class="w-full p-2 rounded bg-gray-700 text-white mb-4" required>
            <button type="submit" class="w-full p-2 bg-blue-500 hover:bg-blue-700 text-white rounded">
                Upload Sponsor Image
            </button>
        </form>
        <div class="p-4">
            <h3 class="text-2xl font-semibold mb-4">Select Sponsor Image</h3>
            <select id="sponsor-image-select" class="w-full p-2 rounded bg-gray-700 text-white">
                <option value="" disabled selected>Select an image</option>
            </select>
            <button id="play-sponsor-display"
                class="w-full mt-4 p-2 bg-green-500 hover:bg-green-700 text-white rounded">
                Play Sponsor Image
            </button>
            <button id="clear-sponsor-display" class="w-full mt-4 p-2 bg-red-500 hover:bg-red-700 text-white rounded">
                Clear Sponsor Display
            </button>
        </div>
    </div>

    <script>
        const socket = io();
        let selectedQuestion = null;
        const playedQuestions = new Set();

        // Toggle Sponsor Panel
        document.getElementById('toggle-sponsor-panel').onclick = () => {
            const panel = document.getElementById('sponsor-panel');
            panel.classList.toggle('open');
        };
        // Fetch Questions
        function fetchQuestions() {
            fetch('/test-questions')
                .then(response => response.json())
                .then(questions => {
                    console.log('Fetched Questions:', questions); 
                    const questionList = document.getElementById('question-list');
                    questionList.innerHTML = ''; 
                    if (questions.length === 0) {
                        questionList.innerHTML = '<li class="text-gray-500 text-center">No questions available</li>';
                        return;
                    }

                    // Render each question
                    questions.forEach(q => {
                        console.log('Rendering Question:', q); 
                        const li = document.createElement('li');
                        li.className = `flex justify-between items-center p-2 rounded ${playedQuestions.has(q._id) ? 'bg-gray-600 disabled' : 'hover:bg-gray-700 cursor-pointer'
                            } ${q.type === 'emoji' ? '' : ''}`;

                        const questionText = document.createElement('span');
                        questionText.textContent = `${q.type === 'emoji' ? '®️ | Emoji Question | ®️                           ': ' '}${q.content}`;
                        if (playedQuestions.has(q._id)) {
                            questionText.style.color = '#718096'; // Gray out text for played questions
                        }

                        li.onclick = () => {
                            if (li.classList.contains('disabled')) return;
                            Array.from(questionList.children).forEach(child => child.classList.remove('bg-blue-500'));
                            li.classList.add('bg-blue-500');
                            selectedQuestion = q;

                            document.getElementById('send-question').disabled = false;
                            document.getElementById('send-answer').disabled = true;
                        };

                        const deleteBtn = document.createElement('form');
                        deleteBtn.method = 'POST';
                        deleteBtn.action = `/questions/delete/${q._id}`;
                        deleteBtn.innerHTML = `
                        <button type="submit" class="bg-red-500 hover:bg-red-700 text-white px-2 py-1 rounded">
                            Delete
                        </button>
                    `;

                        li.appendChild(questionText);
                        li.appendChild(deleteBtn);
                        questionList.appendChild(li);
                    });
                })
                .catch(error => {
                    console.error('Error fetching questions:', error);
                    const questionList = document.getElementById('question-list');
                    questionList.innerHTML = '<li class="text-red-500 text-center">Error loading questions</li>';
                });
        }

        document.getElementById('send-question').onclick = () => {
            if (selectedQuestion) {
                socket.emit('display-question', {
                    _id: selectedQuestion._id,
                    content: selectedQuestion.content,
                    type: selectedQuestion.type,
                    answer: selectedQuestion.answer,
                });

                updateOnAir(selectedQuestion.content, 'Waiting...');
                document.getElementById('send-answer').disabled = false;
                document.getElementById('send-question').disabled = true;
            }
        };


        // Display Answer
        document.getElementById('send-answer').onclick = () => {
            if (selectedQuestion) {
                socket.emit('display-answer', { answer: selectedQuestion.answer });
                updateOnAir(selectedQuestion.content, selectedQuestion.answer);

                disableQuestion(selectedQuestion._id);

                document.getElementById('send-answer').disabled = true;
            }
        };

        document.getElementById('clear-output').onclick = () => {
            socket.emit('clear-output');
            updateOnAir('Waiting...', 'Waiting...');
        };

        function updateOnAir(question, answer) {
            document.getElementById('current-question').innerHTML =
                `Question: <span class="font-semibold">${question || 'Waiting...'}</span>`;
            document.getElementById('current-answer').innerHTML =
                `Answer: <span class="font-semibold">${answer || 'Waiting...'}</span>`;
        }

        function disableQuestion(questionId) {
            playedQuestions.add(questionId); // Mark question as played
            fetchQuestions(); // Re-fetch questions to update the list
        }

        socket.on('current-onair', (data) => {
            updateOnAir(data.question, data.answer);
        });

        socket.on('clear-screen', () => {
            updateOnAir('Waiting...', 'Waiting...');
        });


        fetchQuestions(); // Initial fetch of questions

        const sponsorUploadForm = document.getElementById('sponsor-upload-form');
        sponsorUploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(sponsorUploadForm);
            try {
                const response = await fetch('/upload-sponsor', {
                    method: 'POST',
                    body: formData,
                });
                if (response.ok) {
                    fetchSponsorImages();
                }
            } catch (error) {
                console.error(error);
            }
        });
        async function fetchSponsorImages() {
            const sponsorSelect = document.getElementById('sponsor-image-select');
            sponsorSelect.innerHTML = '<option value="" disabled selected>Select an image</option>';
            try {
                const response = await fetch('/sponsor-images');
                const images = await response.json();
                images.forEach(img => {
                    const option = document.createElement('option');
                    option.value = img.url;
                    option.textContent = img.filename;
                    sponsorSelect.appendChild(option);
                });
            } catch (error) {
                console.error(error);
            }
        }

        fetchSponsorImages();

        document.getElementById('play-sponsor-display').onclick = () => {
            const selectedImage = document.getElementById('sponsor-image-select').value;
            if (selectedImage) {
                socket.emit('display-sponsor', { imageUrl: selectedImage });
            }
        };

        document.getElementById('clear-sponsor-display').onclick = () => {
            socket.emit('clear-sponsor');
        };


    </script>
</body>

</html>